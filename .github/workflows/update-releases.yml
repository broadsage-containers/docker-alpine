name: Update Alpine Releases

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      edge_updated: ${{ steps.check.outputs.edge_updated }}
      versions_updated: ${{ steps.check.outputs.versions_updated }}
      check_status: ${{ steps.check.outputs.check_status }}
      current_version: ${{ steps.check.outputs.current_version }}
      new_version: ${{ steps.check.outputs.new_version }}
      error_message: ${{ steps.check.outputs.error_message }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Check for updates
        id: check
        continue-on-error: true
        env:
          FORCE_DOCKER: "true"  # Force Docker usage in GitHub Actions
        run: |
          set +e  # Don't exit on error, we want to handle it
          chmod +x prepare-branch.sh
          
          # Debug environment
          echo "::group::Environment Information"
          echo "Docker version:"
          docker --version || echo "Docker not available"
          echo ""
          echo "Podman version:"
          podman --version 2>/dev/null || echo "Podman not available"
          echo ""
          echo "Network connectivity test:"
          curl -sSf -I https://dl-cdn.alpinelinux.org/alpine/ | head -5 || echo "Failed to connect to Alpine CDN"
          echo "::endgroup::"
          
          # Initialize variables
          EDGE_UPDATED="false"
          CHECK_STATUS="success"
          ERROR_MESSAGE=""
          CURRENT_EDGE_VERSION=$(cat edge/VERSION 2>/dev/null || echo "none")
          NEW_EDGE_VERSION=""
          
          echo "::notice::Current edge version: $CURRENT_EDGE_VERSION"
          
          # Function to check if error is fatal or temporary
          check_error_type() {
            local log_file="$1"
            if grep -q "No releases found" "$log_file"; then
              return 1  # Non-fatal: no releases available
            elif grep -q "Error.*fetch" "$log_file"; then
              return 2  # Network error
            elif grep -q "Error.*timeout\|Connection.*refused\|Connection.*timed out" "$log_file"; then
              return 2  # Network error
            else
              return 3  # Unknown error
            fi
          }
          
          # Try to prepare edge with retry logic
          MAX_RETRIES=3
          RETRY_COUNT=0
          PREPARE_SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "::group::Attempt $(($RETRY_COUNT + 1)) of $MAX_RETRIES"
            
            if ./prepare-branch.sh prepare edge 2>&1 | tee /tmp/edge-prepare.log; then
              PREPARE_SUCCESS=true
              echo "::endgroup::"
              break
            else
              EXIT_CODE=$?
              echo "::endgroup::"
              
              check_error_type /tmp/edge-prepare.log
              ERROR_TYPE=$?
              
              if [ $ERROR_TYPE -eq 1 ]; then
                # No releases found - this is not an error, just no updates
                echo "::group::Error Log Details"
                cat /tmp/edge-prepare.log
                echo "::endgroup::"
                echo "::notice::No releases currently available on Alpine mirror"
                CHECK_STATUS="no_releases"
                ERROR_MESSAGE="No releases found on Alpine mirror at this time"
                break
              elif [ $ERROR_TYPE -eq 2 ]; then
                # Network error - retry
                RETRY_COUNT=$(($RETRY_COUNT + 1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  SLEEP_TIME=$((2 ** $RETRY_COUNT))
                  echo "::warning::Network error detected. Retrying in ${SLEEP_TIME}s..."
                  sleep $SLEEP_TIME
                else
                  echo "::group::Error Log Details"
                  cat /tmp/edge-prepare.log
                  echo "::endgroup::"
                  CHECK_STATUS="network_error"
                  ERROR_MESSAGE="Network error after $MAX_RETRIES attempts"
                fi
              else
                # Unknown error - don't retry
                echo "::group::Error Log Details"
                cat /tmp/edge-prepare.log
                echo "::endgroup::"
                CHECK_STATUS="error"
                ERROR_MESSAGE=$(grep "Error" /tmp/edge-prepare.log | head -1 || echo "Unknown error occurred")
                break
              fi
            fi
          done
          
          # Process results if preparation was successful
          if [ "$PREPARE_SUCCESS" = true ]; then
            TEMP_DIR=$(ls -dt ~/.cache/docker-brew-alpine-* 2>/dev/null | head -1 || ls -dt /tmp/docker-brew-alpine-* 2>/dev/null | head -1)
            
            if [ -n "$TEMP_DIR" ] && [ -f "$TEMP_DIR/VERSION" ]; then
              NEW_EDGE_VERSION=$(cat "$TEMP_DIR/VERSION")
              echo "::notice::New edge version available: $NEW_EDGE_VERSION"
              
              if [ "$CURRENT_EDGE_VERSION" != "$NEW_EDGE_VERSION" ]; then
                echo "::notice::Edge version changed: $CURRENT_EDGE_VERSION -> $NEW_EDGE_VERSION"
                EDGE_UPDATED="true"
                CHECK_STATUS="update_available"
              else
                echo "::notice::Edge version unchanged: $NEW_EDGE_VERSION"
                CHECK_STATUS="up_to_date"
              fi
              rm -rf "$TEMP_DIR"
            else
              echo "::error::Temporary directory or VERSION file not found"
              CHECK_STATUS="error"
              ERROR_MESSAGE="Failed to locate prepared files"
            fi
          fi
          
          # Set outputs
          echo "edge_updated=${EDGE_UPDATED}" >> $GITHUB_OUTPUT
          echo "check_status=${CHECK_STATUS}" >> $GITHUB_OUTPUT
          echo "current_version=${CURRENT_EDGE_VERSION}" >> $GITHUB_OUTPUT
          echo "new_version=${NEW_EDGE_VERSION}" >> $GITHUB_OUTPUT
          echo "error_message=${ERROR_MESSAGE}" >> $GITHUB_OUTPUT
          
          # Check for new stable versions (placeholder)
          VERSIONS_UPDATED="false"
          echo "versions_updated=${VERSIONS_UPDATED}" >> $GITHUB_OUTPUT
          
          # Exit with appropriate code
          if [ "$CHECK_STATUS" = "error" ] || [ "$CHECK_STATUS" = "network_error" ]; then
            echo "::error::Check failed with status: $CHECK_STATUS"
            exit 1
          fi

  update-edge:
    needs: check-updates
    if: needs.check-updates.outputs.edge_updated == 'true'
    permissions:
      contents: write
      pull-requests: write
    uses: broadsage-containers/docker-alpine/.github/workflows/prepare-release.yml@master
    with:
      branch: edge
      create_pr: true
    secrets: inherit

  notify:
    needs: [check-updates]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Summary
        run: |
          STATUS="${{ needs.check-updates.outputs.check_status }}"
          EDGE_UPDATED="${{ needs.check-updates.outputs.edge_updated }}"
          CURRENT_VERSION="${{ needs.check-updates.outputs.current_version }}"
          NEW_VERSION="${{ needs.check-updates.outputs.new_version }}"
          ERROR_MESSAGE="${{ needs.check-updates.outputs.error_message }}"
          
          # Summary header
          echo "# 🏔️ Alpine Linux Update Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Status-based summary
          case "$STATUS" in
            "update_available")
              echo "## ✅ Update Available" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "A new Alpine Linux edge release has been detected!" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| | |" >> $GITHUB_STEP_SUMMARY
              echo "|---|---|" >> $GITHUB_STEP_SUMMARY
              echo "| **Current Version** | \`$CURRENT_VERSION\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **New Version** | \`$NEW_VERSION\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Status** | 🚀 PR workflow triggered |" >> $GITHUB_STEP_SUMMARY
              ;;
            
            "up_to_date")
              echo "## ✨ Up to Date" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "No new updates available. Current version is up to date." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| | |" >> $GITHUB_STEP_SUMMARY
              echo "|---|---|" >> $GITHUB_STEP_SUMMARY
              echo "| **Current Version** | \`$CURRENT_VERSION\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Status** | ✓ No changes |" >> $GITHUB_STEP_SUMMARY
              ;;
            
            "no_releases")
              echo "## ℹ️ No Releases Available" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "No releases were found on the Alpine mirror at this time." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### This is typically normal and can occur when:" >> $GITHUB_STEP_SUMMARY
              echo "- Mirror is syncing new releases" >> $GITHUB_STEP_SUMMARY
              echo "- Maintenance is being performed" >> $GITHUB_STEP_SUMMARY
              echo "- Release cadence timing" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| | |" >> $GITHUB_STEP_SUMMARY
              echo "|---|---|" >> $GITHUB_STEP_SUMMARY
              echo "| **Current Version** | \`$CURRENT_VERSION\` |" >> $GITHUB_STEP_SUMMARY
              echo "| **Status** | ⏳ Will retry on next scheduled run |" >> $GITHUB_STEP_SUMMARY
              ;;
            
            "network_error")
              echo "## ⚠️ Network Error" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Failed to connect to Alpine mirrors after multiple retry attempts." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Error:** $ERROR_MESSAGE" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🔧 Troubleshooting Steps:" >> $GITHUB_STEP_SUMMARY
              echo "1. Check [Alpine Linux Mirror Status](https://mirrors.alpinelinux.org/)" >> $GITHUB_STEP_SUMMARY
              echo "2. Verify GitHub Actions network connectivity" >> $GITHUB_STEP_SUMMARY
              echo "3. Review workflow logs for detailed error information" >> $GITHUB_STEP_SUMMARY
              echo "4. Manually trigger workflow after some time" >> $GITHUB_STEP_SUMMARY
              ;;
            
            "error")
              echo "## ❌ Check Failed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "An error occurred while checking for updates." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Error:** $ERROR_MESSAGE" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🔧 Next Steps:" >> $GITHUB_STEP_SUMMARY
              echo "1. Review [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details" >> $GITHUB_STEP_SUMMARY
              echo "2. Check if Alpine release structure has changed" >> $GITHUB_STEP_SUMMARY
              echo "3. Verify \`prepare-branch.sh\` script is functioning correctly" >> $GITHUB_STEP_SUMMARY
              echo "4. Open an issue if problem persists" >> $GITHUB_STEP_SUMMARY
              ;;
            
            *)
              echo "## ❓ Unknown Status" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Check completed with unknown status: \`$STATUS\`" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          # Footer
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_This check runs daily at 02:00 UTC. You can also [trigger it manually](${{ github.server_url }}/${{ github.repository }}/actions/workflows/update-releases.yml)._" >> $GITHUB_STEP_SUMMARY
